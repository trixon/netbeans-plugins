/*
 * Copyright 2025 pata.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.netbeans.defaultoptionseditor;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import org.apache.commons.lang3.StringUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//se.trixon.netbeans.defaultoptionseditor//OptionsEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "OptionsEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "se.trixon.netbeans.defaultoptionseditor.OptionsEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_OptionsEditorAction",
        preferredID = "OptionsEditorTopComponent"
)
@Messages({
    "CTL_OptionsEditorAction=OptionsEditor",
    "CTL_OptionsEditorTopComponent=OptionsEditor Window",
    "HINT_OptionsEditorTopComponent=This is a OptionsEditor window"
})
public final class OptionsEditorTopComponent extends TopComponent {

    private static final long serialVersionUID = 1L;
    private File mFile;
    private String mKey;
    private final Properties mProperties = new Properties();
    private String mValue;

    public OptionsEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_OptionsEditorTopComponent());
        initDragAndDrop();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        sortButton = new javax.swing.JButton();
        revertButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        textField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        toolBar.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(sortButton, org.openide.util.NbBundle.getMessage(OptionsEditorTopComponent.class, "OptionsEditorTopComponent.sortButton.text")); // NOI18N
        sortButton.setFocusable(false);
        sortButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sortButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });
        toolBar.add(sortButton);

        org.openide.awt.Mnemonics.setLocalizedText(revertButton, org.openide.util.NbBundle.getMessage(OptionsEditorTopComponent.class, "OptionsEditorTopComponent.revertButton.text")); // NOI18N
        revertButton.setFocusable(false);
        revertButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        revertButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        revertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertButtonActionPerformed(evt);
            }
        });
        toolBar.add(revertButton);

        org.openide.awt.Mnemonics.setLocalizedText(copyButton, org.openide.util.NbBundle.getMessage(OptionsEditorTopComponent.class, "OptionsEditorTopComponent.copyButton.text")); // NOI18N
        copyButton.setFocusable(false);
        copyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        toolBar.add(copyButton);

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(OptionsEditorTopComponent.class, "OptionsEditorTopComponent.saveButton.text")); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(saveButton);

        add(toolBar, java.awt.BorderLayout.NORTH);

        textArea.setColumns(20);
        textArea.setRows(5);
        scrollPane.setViewportView(textArea);

        add(scrollPane, java.awt.BorderLayout.CENTER);
        add(textField, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void revertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertButtonActionPerformed
        load(mFile);
    }//GEN-LAST:event_revertButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        var string = "%s=\"%s\"".formatted(mKey, textField.getText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(string), null);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("sort1");
    }//GEN-LAST:event_sortButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JButton revertButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton sortButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textField;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void initDragAndDrop() {
        var dropTarget = new DropTarget() {
            @Override
            public synchronized void drop(DropTargetDropEvent evt) {
                evt.acceptDrop(DnDConstants.ACTION_COPY);
                try {
                    @SuppressWarnings("unchecked")
                    var files = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    load(files.getFirst());
                } catch (UnsupportedFlavorException | IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }

        };

        //setDropTarget(dropTarget);
        textArea.setDropTarget(dropTarget);
    }

    private void load(String s) {
        textField.setText(s);
        textArea.setText("");

        s = StringUtils.removeStart(s, "\"");
        s = StringUtils.removeEnd(s, "\"");
//        var items = StringUtils.split(StringUtils.normalizeSpace(s), " -");
//        var items = StringUtils.splitPreserveAllTokens(s, " -");

        String separator = " -";

        String[] result = StringUtils.splitByWholeSeparatorPreserveAllTokens(s, separator);

        for (String part : result) {
            textArea.append("0-%s\n".formatted(part));
        }
    }

    private void load(File file) {
        mFile = file;
        textArea.setText(file.getAbsolutePath() + "\nInvalid file");
        try (var fis = new FileInputStream(file)) {
            mProperties.load(fis);
            for (var key : List.of("netbeans_default_options", "default_options")) {
                if (mProperties.containsKey(key)) {
                    mKey = key;
                    mValue = (String) mProperties.get(key);
                    load(mValue);
                    break;
                }
            }
        } catch (IOException e) {
            Exceptions.printStackTrace(e);
        }
    }

}
